/*
 * Face Detection And Recognition API
 *
 * Detect faces and recognize people from a specified image.
 *
 * API version: 0.1.9
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"V1AuthPost",
			strings.ToUpper("Post"),
			"/v1/auth",
			c.V1AuthPost,
		},
	}
}

// V1AuthPost - Returns whether specified user is identified.
func (c *DefaultApiController) V1AuthPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	// TODO デフォルトで実装されていた箇所. 今後不要であれば削除
	//fileNameParam, err := ReadFormFileToTempFile(r, "fileName")
	//if err != nil {
	//	c.errorHandler(w, r, &ParsingError{Err: err}, nil)
	//	return
	//}

	_, fileHeader, err := r.FormFile("fileName")
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	// TODO ファイルを再オープンする方法があればこの処理は削除
	//defer fileNameParam.Close()

	result, err := c.service.V1AuthPost(r.Context(), fileHeader)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
