/*
 * Face Detection And Recognition API
 *
 * Detect faces and recognize people from a specified image.
 *
 * API version: 0.1.9
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"gocv-sample/constant"
	"gocv.io/x/gocv"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	classifier *gocv.CascadeClassifier
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(classifierFileName string) (DefaultApiServicer, error) {

	// load classifier file for face detection
	classifier := gocv.NewCascadeClassifier()
	if !classifier.Load(classifierFileName) {
		return &DefaultApiService{}, errors.New("cannot load classifier file")
	}

	return &DefaultApiService{
		classifier: &classifier,
	}, nil
}

// V1AuthPost - Returns whether specified user is identified.
func (s *DefaultApiService) V1AuthPost(ctx context.Context, fileHeader *multipart.FileHeader) (ImplResponse, error) {
	// open request file
	file, err := fileHeader.Open()
	if err != nil {
		log.Printf("failed to open image file. err=%v", err)

		errorCode := constant.ET5001
		return Response(errorCode.StatusCode, V1AuthPost500Response{
			Code:        errorCode.FullCode(),
			Message:     errorCode.Message,
			Description: errorCode.Detail,
		}), nil
	}
	defer file.Close()

	imgBytes, err := ioutil.ReadAll(file)
	if err != nil {
		log.Printf("failed to read image file. err=%v", err)

		errorCode := constant.ET5002
		return Response(errorCode.StatusCode, V1AuthPost500Response{
			Code:        errorCode.FullCode(),
			Message:     errorCode.Message,
			Description: errorCode.Detail,
		}), nil
	}

	// decode face image for face detection
	img, err := gocv.IMDecode(imgBytes, gocv.IMReadColor)
	if err != nil {
		log.Printf("cannot decode image file err=%v", err)

		errorCode := constant.ET5003
		return Response(errorCode.StatusCode, V1AuthPost500Response{
			Code:        errorCode.FullCode(),
			Message:     errorCode.Message,
			Description: errorCode.Detail,
		}), nil
	}
	defer img.Close()

	// execute face detection
	rects := s.classifier.DetectMultiScale(img)

	if len(rects) < 1 {
		log.Printf("failed to detect face form image. err=%d", len(rects))

		errorCode := constant.EC4001
		return Response(errorCode.StatusCode, V1AuthPost500Response{
			Code:        errorCode.FullCode(),
			Message:     errorCode.Message,
			Description: errorCode.Detail,
		}), nil
	}

	// output face detection result
	for i, e := range rects {
		log.Printf("rectangle(%d) axis -> %s\n", i+1, e.String())
	}

	return Response(http.StatusNotImplemented, V1AuthPost200Response{Result: "OK"}), nil
}
